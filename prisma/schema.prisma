generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          =  env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  firstname    String?
  lastname     String
  password     String
  company      String
  salt         String
  hashpassword String
  documents        Document[]  @relation("DocumentOwner")
  collaborations   Collaboration[]
  Notification Notification[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}


 
  model Document {
    id               String          @id @default(uuid())
    title            String
    contentType      ContentType
    contentPath      String    @db.LongText      // Path to .lexical or .docx files
    ownerId          String
    owner            User            @relation("DocumentOwner", fields: [ownerId], references: [id])
    collaborators    Collaboration[] @relation("DocumentCollaborators")
    maxCollaborators Int             @default(5)
    isCollaborationOn Boolean        @default(false)
    contractTemplate ContractTemplate? @relation(fields: [contractTemplateId], references: [id])
    contractTemplateId String?
    createdAt        DateTime        @default(now())
    updatedAt        DateTime        @updatedAt
  
    Notification Notification[]

    @@index([ownerId])
    @@index([contractTemplateId])
}
  
  model Collaboration {
    id          String    @id @default(uuid())
    documentId  String
    document    Document   @relation("DocumentCollaborators", fields: [documentId], references: [id])
    userId      String
    user        User       @relation(fields: [userId], references: [id])
    role        Role       // Signer or Collaborator
    signed      Boolean    @default(false)
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt
  
    @@index([documentId])
    @@index([userId])
}
  
  model Notification {
    id          String    @id @default(uuid())
    userId      String
    user        User       @relation(fields: [userId], references: [id])
    documentId  String
    document    Document   @relation(fields: [documentId], references: [id])
    type        NotificationType
    createdAt   DateTime   @default(now())
  
    @@index([userId])
    @@index([documentId])
}
  
  model ContractTemplate {
    id          String    @id @default(uuid())
    name        String
    description String
    filePath    String      @db.LongText     // Path to the template file
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
  
    Document Document[]
}
  
  enum ContentType {
    LEXICAL
    DOCX
  }
  
  enum Role {
    ORIGINATOR
    COLLABORATOR
    SIGNER
  }
  
  enum NotificationType {
    SIGNATURE_REQUEST
    SIGNATURE_COMPLETED
    COLLABORATOR_ADDED
    COLLABORATOR_REMOVED
  }
  