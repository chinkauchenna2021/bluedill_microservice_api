// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id           String   @id @default(uuid())
  email        String   @unique
  firstname    String?
  lastname     String
  password     String
  company      String
  salt         String
  hashpassword String
  chat         Chat[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model CollaborateDocs {
  id                  String         @id @default(uuid())
  docid               String
  docname             String
  roomId              String
  requestingSignature Boolean
  collaborator        Collaborator[]
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
}

model Collaborator {
  id                 String          @id @default(uuid())
  collaboratingUsers CollaborateDocs @relation(fields: [collabId], references: [id])
  collabId             String
  collaboratorEmail  String
  isSigned           Boolean
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt

  @@index([collabId])
}

model Document {
  id             String           @id @default(uuid())
  docid          String           @unique
  docname        String
  doclink        String
  userUpdateDoc  String
  templateType   String
  isEncrypted    Boolean          @default(false)
  securityCode   String?
  // docsEncryption DocsEncryption[]
  docformat      String           @default("lexical")
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model DocsEncryption {
  id                 String   @id @default(uuid())
  decryptionLink     String
  encryptionLink     String
  encryptionPassword String
  // document           Document @relation(fields: [encryptId], references: [id])
  encryptDocsId      String @default(uuid())
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@index([encryptDocsId])
}

model Chat {
  id               String   @id @default(uuid())
  userEmail        String   @unique
  userMessage      String
  senderUserId     String
  receiverUserId   String
  isReceivedStatus Boolean  @default(false)
  user             User     @relation(fields: [userId], references: [id])
  userId           String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([userId])
}



model generatePassword{
    id String @id @default(uuid())
    password String
    createdAt        DateTime @default(now())
    updatedAt        DateTime @updatedAt
}

